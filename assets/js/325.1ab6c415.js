(window.webpackJsonp=window.webpackJsonp||[]).push([[325],{760:function(t,a,n){"use strict";n.r(a);var s=n(43),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"proxymap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proxymap"}},[t._v("#")]),t._v(" ProxyMap "),n("Badge",{attrs:{text:"Class",type:"class"}}),t._v(" "),n("Badge",{attrs:{text:"private",title:"private",type:"private"}}),t._v(" "),n("Badge",{attrs:{text:"deprecated",title:"deprecated",type:"deprecated"}})],1),t._v(" "),n("section",{staticClass:"symbol-info"},[n("table",{staticClass:"is-full-width"},[n("tbody",[n("tr",[n("th",[t._v("Module")]),n("td",[n("div",{staticClass:"lang-typescript"},[n("span",{staticClass:"token keyword"},[t._v("import")]),t._v(" { ProxyMap } "),n("span",{staticClass:"token keyword"},[t._v("from")]),t._v(" "),n("span",{staticClass:"token string"},[t._v('"@tsed/core"')])])])]),n("tr",[n("th",[t._v("Source")]),n("td",[n("a",{attrs:{href:"https://github.com/tsedio/tsed/blob/v5.67.2/packages/core/src/class/ProxyMap.ts#L0-L0"}},[t._v("/packages/core/src/class/ProxyMap.ts")])])])])])]),t._v(" "),n("h2",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),n("div",{staticClass:"language-typescript"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" ProxyMap<T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" I> "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" Map<T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" I> "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" registry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Map<T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" I>"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("div",{pre:!0,attrs:{class:"language- extra-class"}},[n("pre",[n("code",[t._v('<span class="token keyword">readonly</span> <span class="token punctuation">[</span>Symbol.toStringTag<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"Map"</span><span class="token punctuation">;</span>\n<span class="token keyword">constructor</span><span class="token punctuation">(</span>registry<span class="token punctuation">:</span> Map&lt;T<span class="token punctuation">,</span> I&gt;<span class="token punctuation">,</span> mapSettings?<span class="token punctuation">:</span> <a href="/api/core/class/ProxyMapSettings.html"><span class="token">ProxyMapSettings</span></a><span class="token punctuation">)</span><span class="token punctuation">;</span>\n/**\n * Return the size of the map.\n * @returns <span class="token punctuation">{</span><span class="token keyword">number</span><span class="token punctuation">}</span>\n */\nget <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>\n/**\n *\n * @param value\n * @param query\n * @returns <span class="token punctuation">{</span><span class="token keyword">boolean</span><span class="token punctuation">}</span>\n */\n\n/**\n *\n * @returns <span class="token punctuation">{</span>IterableIterator&lt;<span class="token punctuation">[</span>T <span class="token punctuation">,</span> I<span class="token punctuation">]</span>&gt;<span class="token punctuation">}</span>\n */\n<span class="token punctuation">[</span>Symbol.iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> IterableIterator&lt;<span class="token punctuation">[</span>T<span class="token punctuation">,</span> I<span class="token punctuation">]</span>&gt;<span class="token punctuation">;</span>\n/**\n * The <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method removes all elements <span class="token keyword">from</span> a Map object.\n */\n<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n/**\n * The <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method removes the specified element <span class="token keyword">from</span> a Map object.\n * @param key <a href="/api/common/mvc/decorators/Required.html"><span class="token">Required</span></a>. The key of the element to remove <span class="token keyword">from</span> the Map object.\n * @returns <span class="token punctuation">{</span><span class="token keyword">boolean</span><span class="token punctuation">}</span> <a href="/api/common/mvc/decorators/method/Returns.html"><span class="token">Returns</span></a> true if an element in the Map object existed and has been removed<span class="token punctuation">,</span> or false if the element does not exist.\n */\n<span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>\n/**\n * The <span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method returns a new Iterator object that contains the <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> pairs for each element in the Map object in insertion order.\n * @returns <span class="token punctuation">{</span>IterableIterator<span class="token punctuation">}</span> A new Map iterator object.\n */\n<span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> IterableIterator&lt;<span class="token punctuation">[</span>T<span class="token punctuation">,</span> I<span class="token punctuation">]</span>&gt;<span class="token punctuation">;</span>\n/**\n * The <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.\n * @returns <span class="token punctuation">{</span>IterableIterator<span class="token punctuation">}</span> A new Map iterator object.\n */\n<span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> IterableIterator&lt;T&gt;<span class="token punctuation">;</span>\n/**\n * The <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method returns a new Iterator object that contains the values for each element in the Map object in insertion order.\n * @returns <span class="token punctuation">{</span>IterableIterator<span class="token punctuation">}</span> A new Map iterator object.\n */\n<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> IterableIterator&lt;I&gt;<span class="token punctuation">;</span>\n/**\n * The <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method executes a provided function once per each key/value pair in the Map object<span class="token punctuation">,</span> in insertion order.\n *\n * @param callbackfn Function to execute for each element.\n * @param thisArg <a href="/api/di/decorators/Value.html"><span class="token">Value</span></a> to use <span class="token keyword">as</span> this when executing callback.\n * @description\n * The forEach method executes the provided callback once for each key of the map which actually exist. It is not invoked for keys which have been deleted. However<span class="token punctuation">,</span> it is executed for values which are present but have the value undefined.\n * callback is invoked with three arguments<span class="token punctuation">:</span>\n *\n * * the element value\n * * the element key\n * * the Map object being traversed\n *\n * If a thisArg parameter is provided to forEach<span class="token punctuation">,</span> it will be passed to callback when invoked<span class="token punctuation">,</span> for use <span class="token keyword">as</span> its this value.  Otherwise<span class="token punctuation">,</span> the value undefined will be passed for use <span class="token keyword">as</span> its this value.  The this value ultimately observable by callback is determined according to the usual rules for determining the this seen by a function.\n *\n * Each value is visited once<span class="token punctuation">,</span> except in the case when it was deleted and re-added before forEach has finished. callback is not invoked for values deleted before being visited. New values added before forEach has finished will be visited.\n * forEach executes the callback function once for each element in the Map object<span class="token punctuation">;</span> it does not return a value.\n *\n */\n<span class="token function">forEach</span><span class="token punctuation">(</span>callbackfn<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> I<span class="token punctuation">,</span> key<span class="token punctuation">:</span> T<span class="token punctuation">,</span> map<span class="token punctuation">:</span> Map&lt;T<span class="token punctuation">,</span> I&gt;<span class="token punctuation">)</span> =&gt; <span class="token keyword">void</span><span class="token punctuation">,</span> thisArg?<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n/**\n * The <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method returns a specified element <span class="token keyword">from</span> a Map object.\n * @param key <a href="/api/common/mvc/decorators/Required.html"><span class="token">Required</span></a>. The key of the element to return <span class="token keyword">from</span> the Map object.\n * @returns <span class="token punctuation">{</span>T<span class="token punctuation">}</span> <a href="/api/common/mvc/decorators/method/Returns.html"><span class="token">Returns</span></a> the element associated with the specified key or undefined if the key can\'t be found in the Map object.\n */\n<span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> I | undefined<span class="token punctuation">;</span>\n/**\n * The <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method adds or updates an element with a specified key and value to a Map object.\n * @param key <a href="/api/common/mvc/decorators/Required.html"><span class="token">Required</span></a>. The key of the element to add to the Map object.\n * @param value <a href="/api/common/mvc/decorators/Required.html"><span class="token">Required</span></a>. The value of the element to add to the Map object.\n * @returns <span class="token punctuation">{</span><a href="/api/core/class/Registry.html"><span class="token">Registry</span></a><span class="token punctuation">}</span>\n */\n<span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> T<span class="token punctuation">,</span> value<span class="token punctuation">:</span> I<span class="token punctuation">)</span><span class="token punctuation">:</span> this<span class="token punctuation">;</span>\n/**\n * The <span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method returns a <span class="token keyword">boolean</span> indicating whether an element with the specified key exists or not.\n * @param key\n * @returns <span class="token punctuation">{</span><span class="token keyword">boolean</span><span class="token punctuation">}</span>\n */\n<span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>\n/**\n *\n * @returns <span class="token punctuation">{</span>Map&lt;<span class="token keyword">any</span><span class="token punctuation">,</span> <span class="token keyword">any</span>&gt;<span class="token punctuation">}</span>\n */\n')])])]),n("p",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"members"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#members"}},[t._v("#")]),t._v(" Members")]),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" registry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Map<T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" I>"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("readonly")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol.toStringTag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Map"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[t._v("get "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("p",[t._v("Return the size of the map.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol.iterator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IterableIterator<"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" I"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(">"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("p",[t._v("The clear() method removes all elements from a Map object.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Param")]),t._v(" "),n("th",[t._v("Type")]),t._v(" "),n("th",[t._v("Description")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("key")]),t._v(" "),n("td",[n("code",[t._v("T")])]),t._v(" "),n("td",[t._v("Required. The key of the element to remove from the Map object.")])])])]),t._v(" "),n("p",[t._v("The delete() method removes the specified element from a Map object.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IterableIterator<"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" I"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(">"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("p",[t._v("The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IterableIterator<T>"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("p",[t._v("The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IterableIterator<I>"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("p",[t._v("The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callbackfn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" I"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Map<T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" I>"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" => "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg?"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("any")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Param")]),t._v(" "),n("th",[t._v("Type")]),t._v(" "),n("th",[t._v("Description")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("callbackfn")]),t._v(" "),n("td",[n("code",[t._v("(value: I")])]),t._v(" "),n("td",[t._v("Function to execute for each element.  thisArg")])])])]),t._v(" "),n("p",[t._v("The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.")]),t._v(" "),n("p",[t._v("The forEach method executes the provided callback once for each key of the map which actually exist. It is not invoked for keys which have been deleted. However, it is executed for values which are present but have the value undefined.\ncallback is invoked with three arguments:")]),t._v(" "),n("ul",[n("li",[t._v("the element value")]),t._v(" "),n("li",[t._v("the element key")]),t._v(" "),n("li",[t._v("the Map object being traversed")])]),t._v(" "),n("p",[t._v("If a thisArg parameter is provided to forEach, it will be passed to callback when invoked, for use as its this value.  Otherwise, the value undefined will be passed for use as its this value.  The this value ultimately observable by callback is determined according to the usual rules for determining the this seen by a function.")]),t._v(" "),n("p",[t._v("Each value is visited once, except in the case when it was deleted and re-added before forEach has finished. callback is not invoked for values deleted before being visited. New values added before forEach has finished will be visited.\nforEach executes the callback function once for each element in the Map object; it does not return a value.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" I | undefined"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Param")]),t._v(" "),n("th",[t._v("Type")]),t._v(" "),n("th",[t._v("Description")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("key")]),t._v(" "),n("td",[n("code",[t._v("T")])]),t._v(" "),n("td",[t._v("Required. The key of the element to return from the Map object.")])])])]),t._v(" "),n("p",[t._v("The get() method returns a specified element from a Map object.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" I"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" this"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Param")]),t._v(" "),n("th",[t._v("Type")]),t._v(" "),n("th",[t._v("Description")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("key")]),t._v(" "),n("td",[n("code",[t._v("T")])]),t._v(" "),n("td",[t._v("Required. The key of the element to add to the Map object.  value")])])])]),t._v(" "),n("p",[t._v("The set() method adds or updates an element with a specified key and value to a Map object.")])]),n("hr"),t._v(" "),n("div",{pre:!0},[n("div",{pre:!0,attrs:{class:"method-overview"}},[n("div",{pre:!0,attrs:{class:"language-typescript"}},[n("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[n("code",{pre:!0,attrs:{class:"typescript-lang "}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])])]),t._v(" "),n("p",[t._v("The has() method returns a boolean indicating whether an element with the specified key exists or not.")])])])}),[],!1,null,null,null);a.default=e.exports}}]);